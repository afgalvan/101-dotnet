@using ContosoCraft.Models;
@using ContosoCraft.Web.Services;
@using Microsoft.AspNetCore.Components.Web
@inject JsonProductLoader _jsonProductLoader;
@inject RatingSubmitter _ratingSubmitter;

<h3 class="text-light">Product List</h3>

<div class="card-columns">
    @foreach (Product product in _products)
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.ImageUrl');">
            </div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <button @onclick="e => SelectProduct(e, product)"
                            data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More Info
                    </button>
                </small>
            </div>
        </div>
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@if (SelectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@SelectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@SelectedProduct.ImageUrl');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@SelectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" param="@CurrentRating">
                    @if (VoteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@VoteCount @VoteLabel</span>
                    }
                    @for (var i = 1; i < 6; i++)
                    {
                        int currentStar = i;
                        string checkedAttribute = currentStar <= CurrentRating ? "checked" : string.Empty;
                        <span class="fa fa-star @checkedAttribute" @onclick="e => SubmitRating(e, currentStar)"></span>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int CurrentRating { get; set; }
    public int VoteCount { get; set; }
    public string VoteLabel { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    private IList<Product> _products;

    protected override async Task OnInitializedAsync()
    {
        _products = new List<Product>();

        (await _jsonProductLoader.GetProductList())
            .ToList()
            .ForEach(p => _products.Add(p));

        StateHasChanged();
    }

    private void GetProductRating(Product product)
    {
        if (product.Ratings == null)
        {
            CurrentRating = 0;
            VoteCount = 0;
        }
        else
        {
            VoteCount = product.Ratings.Count();
            VoteLabel = VoteCount > 1 ? "Votes" : "Vote";
            CurrentRating = (int) (product.Ratings.Sum(r => r.Score) / VoteCount);
        }
    }

    private async Task SubmitRating(MouseEventArgs mouseEvent, double score)
    {
        await _ratingSubmitter.SubmitRating(SelectedProduct.Id, score);
        SelectProduct(mouseEvent, SelectedProduct);
        StateHasChanged();
    }

    private void SelectProduct(MouseEventArgs mouseEvent, Product product)
    {
        SelectedProduct = product;
        GetProductRating(SelectedProduct);
        StateHasChanged();
    }
}
